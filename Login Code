# Login Code for IRock 
# Lauren and Zachary 
# April 14 - May 14

# Imports all modules 
from tkinter import *
import os
import csv


# designs the main_account_screen window/ the main window
# def main_account_screen():
global main_screen # changes the main_screen variable to a global variable
main_screen = Tk()   # creates a GUI window 
main_screen.geometry("300x250") # sets the configuration/size of GUI window 
main_screen.title("Account Login") # sets the title of GUI window
    
# designs the registration window
def register():
    # makes variables global
    global username
    global password
    global security
    global username_entry
    global password_entry
    global security_entry 
    global register_screen

    register_screen = Toplevel(main_screen) # creates the GUI window 
    register_screen.title("Register") # sets the title of the window
    register_screen.geometry("350x325") # sets the size of the window
    
    # sets variables for username, password, and security  
    username = StringVar()
    password = StringVar()
    security = StringVar()

    # Text that gives instructions to the user 
    Label(register_screen, text="Please enter details below to register", bg="skyblue").pack()
    Label(register_screen, text="").pack()

    # Creates a place for a username to be entered (by the user)
    username_lable = Label(register_screen, text="Username *")
    username_lable.pack()
    username_entry = Entry(register_screen, textvariable=username)
    username_entry.pack()
    
    # Creates a place for a password to be entered 
    password_lable = Label(register_screen, text="Password * ")
    password_lable.pack()
    password_entry = Entry(register_screen, textvariable=password)
    password_entry.pack() 

    # Creates a space between the password box and the security question
    Label(register_screen, text="").pack()

    # Creates a place for the security question to be answered
    security_lable = Label(register_screen, text = "Security Question")
    security_lable.pack()
    security_lable2 = Label(register_screen, text = "What was the name of your first pet?")
    security_lable2.pack()
    security_entry = Entry(register_screen, textvariable=security)
    security_entry.pack()

    # Creates a space between the security box and the register button
    Label(register_screen, text="").pack()
   
    # Creates a register button (to confirm registration) in the register popup box
    Button(register_screen, text="Register", width=10, height=1, bg="blue", command = register_user).pack()


# designs the login window
def login():
    # makes variables global 
    global login_screen
    global username_verify
    global password_verify
    global username_login_entry
    global password_login_entry
    
    login_screen = Toplevel(main_screen) # creates the GUI window
    login_screen.title("Login") # sets the title of the window 
    login_screen.geometry("300x250") # sets the size of the window

    # sets variables to verify username and password
    username_verify = StringVar()
    password_verify = StringVar()

    # Text that gives instructions to the user
    Label(login_screen, text="Please enter details below to login", bg="skyblue").pack()
    Label(login_screen, text="").pack()

    # Creates places for the username and password to be entered 
    Label(login_screen, text="Username * ").pack() 
    username_login_entry = Entry(login_screen, textvariable=username_verify)
    username_login_entry.pack()
    
    Label(login_screen, text="Password * ").pack()
    password_login_entry = Entry(login_screen, textvariable=password_verify, show= '*')
    password_login_entry.pack()

    # Creates a space between the password box and the login button
    Label(login_screen, text="").pack()

    # Creates a login button (to confirm login) in the login popup box
    Button(login_screen, text="Login", width=10, height=1, bg="blue", command = login_verify).pack()


# performs the function of registering the user (the command that happens when the user clicks the "register" button after entering their info)
def register_user():
    # checks if the username already exists, and then if it does, calls the user repeat function 
    with open("IRock_registration_info.txt", mode='r') as csv_file:
        csv_reader = csv.reader(csv_file, delimiter=',')
        for row in csv_reader:
            if row[0] == username.get():
                user_repeat()
                return

    # adds the user's info to the IRock registration csv file
    with open("IRock_registration_info.txt", mode='a') as csv_file:
        registration_writer = csv.writer(csv_file, delimiter=',')
                
        registration_writer.writerow([username.get(), password.get(), security.get()])

        # Deletes the registration entries from the boxes in the window after the user registers 
        username_entry.delete(0, END)
        password_entry.delete(0, END)
        security_entry.delete(0, END)

        
    # sets a label that says "registration success"
    Label(register_screen, text="Registration Success", fg="green", font=("calibri", 11)).pack()

# defines the user repeat function (if a username already exists, offers the user two new options)
def user_repeat():
    # designs the user repeat window
    global user_repeat_screen
    user_repeat_screen = Toplevel(register_screen)
    user_repeat_screen.title("IRock Login")
    user_repeat_screen.geometry("200x150")

    # Creates a label and two buttons that can direct the user to a new page 
    Label(user_repeat_screen, text="Username Already Exsists").pack()
    Button(user_repeat_screen, text="Change Username", command=register).pack()
    Button(user_repeat_screen, text="Login ", command=login).pack()


# defines the login verification function 
def login_verify():
    
    #get username and password
    username1 = username_verify.get()
    password1 = password_verify.get()
    
    # this will delete the entry after login button is pressed
    username_login_entry.delete(0, END)
    password_login_entry.delete(0, END)

    registration_file = "IRock_registration_info.txt"
    
    # defines the verification's conditions (what conditions the username and password must meet in order to be verified)
    with open("IRock_registration_info.txt", mode='r') as csv_file:
        csv_reader = csv.reader(csv_file, delimiter=',')
        usercheck = False
        
        for row in csv_reader:
    
            if row[0] == username1: 
                usercheck = True 
                if row[1] == password1: 
                    login_sucess()
        
                else: 
                    password_not_recognised()

        if usercheck == False:
            user_not_found()

# Creates a "login success" popup window
def login_sucess():
    global login_success_screen   # make login_success_screen variable global
    login_success_screen = Toplevel(login_screen)
    login_success_screen.title("IRock Login")
    login_success_screen.geometry("150x100")
    Label(login_success_screen, text="Login Success").pack()
    Button(login_success_screen, text="OK", command = delete_login_success).pack()


# Creates an "invalid password" popup window 
def password_not_recognised(): 
    global password_not_recog_screen
    password_not_recog_screen = Toplevel(login_screen)
    password_not_recog_screen.title("IRock Login")
    password_not_recog_screen.geometry("150x100")
    Label(password_not_recog_screen, text="Invalid Password ").pack()
    Button(password_not_recog_screen, text="Try Again", command=delete_password_not_recognised).pack()
    Button(password_not_recog_screen, text="Forgot Password", command=forgot_password).pack()


# Creates a "user not found" popup window 
def user_not_found():
    global user_not_found_screen
    user_not_found_screen = Toplevel(login_screen)
    user_not_found_screen.title("IRock Login")
    user_not_found_screen.geometry("150x100")
    Label(user_not_found_screen, text="User Not Found").pack()
    Button(user_not_found_screen, text="Try Again", command=delete_user_not_found_screen).pack()
    Button(user_not_found_screen, text="Register", command=register).pack()



# designs the “forgot password” window
def forgot_password():
    # makes variables global 
    global forgot_password_screen
    global security_verify
    global security_verify_entry

    
    forgot_password_screen = Toplevel(main_screen)
    forgot_password_screen.title("Forgot Password")
    forgot_password_screen.geometry("500x200")

    # sets variables to verify security response 
    security_verify = StringVar() 

    # Text that gives instructions to the user
    Label(forgot_password_screen, text="To recover your password, answer the security question below", bg="skyblue").pack()
    Label(forgot_password_screen, text="What was the name of your first pet?", bg="skyblue").pack()
    Label(forgot_password_screen, text="").pack()

    # Creates a place for the security response to be entered 
    security_verify_entry = Entry(forgot_password_screen, textvariable=security_verify)
    security_verify_entry.pack()
  
    # Creates a space between the box and the submit button
    Label(forgot_password_screen, text="").pack()

    # Creates a button (to submit the response to the security question) in the forgot password window
    Button(forgot_password_screen, text="Submit", width=10, height=1, bg="blue", command = security_question_verify).pack()


# creates a function that verifies the security question response (when someone clicks on the forgot password option) 
def security_question_verify():
    
    #gets the security answer 
    security1 = security_verify.get()
    
    # this will delete the entry after submit button is pressed
    security_verify_entry.delete(0, END)


    registration_file = "IRock_registration_info.txt"

    #defining verification's conditions 
    with open("IRock_registration_info.txt", mode='r') as csv_file:
        csv_reader = csv.reader(csv_file, delimiter=',')
        securitycheck = False
        
        for row in csv_reader:
            if row[2] == security1:
                password1 = row[1]
                securitycheck = True 
                security_sucess(password1)
                return

        security_incorrect()


# Creates a “security success" popup 
def security_sucess(password):
    global security_success_screen   # makes the variable global
    security_success_screen = Toplevel(forgot_password_screen)
    security_success_screen.title("Success!")
    security_success_screen.geometry("200x150")
    Label(security_success_screen, text="Security response verified").pack()
    Label(security_success_screen, text="Password: " + password).pack()
    Button(security_success_screen, text="OK", command = delete_security_success).pack()


# Creates a “security incorrect” popup
def security_incorrect(): 
    global security_incorrect_screen
    security_incorrect_screen = Toplevel(forgot_password_screen)
    security_incorrect_screen.title("Security not verified")
    security_incorrect_screen.geometry("200x150")
    Label(security_incorrect_screen, text="Invalid Security Response").pack()
    Button(security_incorrect_screen, text="Try Again", command=delete_security_incorrect_screen).pack()


# Deletes security popups after they appear: 
# deletes the “security success" popup and the forgot password popup 
def delete_security_success():
    security_success_screen.destroy()
    forgot_password_screen.destroy()

# deletes the “security incorrect” popup
def delete_security_incorrect_screen():
    security_incorrect_screen.destroy() 



# Deletes login popups after they appear: 
# deletes the "login success" popup
def delete_login_success():
    login_success_screen.destroy()

# deletes the "invalid password" popup
def delete_password_not_recognised():
    password_not_recog_screen.destroy()

# deletes the "user not found" popup
def delete_user_not_found_screen():
    user_not_found_screen.destroy()


# create a form label for the main account screen
Label(text="Welcome to IROCK", bg="skyblue", width="300", height="2", font=("Calibri", 13)).pack()
Label(text="Choose Login Or Register", bg="skyblue", width="300", height="2", font=("Calibri", 13)).pack()
Label(text="").pack()


# create the login button on the main screen
Button(text="Login", height="2", width="30", command=login).pack() 
Label(text="").pack()

# create the register button on the main screen
Button(text="Register", height="2", width="30", command=register).pack()

# create OK button
Button(login_success_screen, text="OK", command=delete_login_success).pack()


main_screen.mainloop() # start the GUI
main_account_screen()

